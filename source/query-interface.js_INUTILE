/*
INUTILE.
FATTA DA ME. NON USATA PERCHE' UPSERT DA' ERRORE SUI CAMPI NON NULLI

*/

const {
  QueryInterface
} = require('sequelize/lib/dialects/abstract/query-interface');

QueryInterface.prototype.bulkInsert = async function (tableName, records, options, attributes) {
  options = __spreadValues({}, options);
  if (options.ignoreDuplicates)
    options.type = QueryTypes.INSERT;
  else options.type = QueryTypes.UPSERT;
  const results = await this.sequelize.query(this.queryGenerator.bulkInsertQuery(tableName, records, options, attributes), options);
  return results[0];
}


QueryInterface.prototype.bulkInsertQuery = async function (tableName, fieldValueHashes, options, fieldMappedAttributes) {
  options = options || {};
  fieldMappedAttributes = fieldMappedAttributes || {};
  const tuples = [];
  const serials = {};
  const allAttributes = [];
  let onDuplicateKeyUpdate = "";
  for (const fieldValueHash of fieldValueHashes) {
    _.forOwn(fieldValueHash, (value, key) => {
      if (!allAttributes.includes(key)) {
        allAttributes.push(key);
      }
      if (fieldMappedAttributes[key] && fieldMappedAttributes[key].autoIncrement === true) {
        serials[key] = true;
      }
    });
  }
  for (const fieldValueHash of fieldValueHashes) {
    const values = allAttributes.map((key) => {
      if (this._dialect.supports.bulkDefault && serials[key] === true) {
        return fieldValueHash[key] != null ? fieldValueHash[key] : "DEFAULT";
      }
      return this.escape(fieldValueHash[key], fieldMappedAttributes[key], { context: "INSERT" });
    });
    tuples.push(`(${values.join(",")})`);
  }

  /*
  DISABILITATO PERCHE' UPSERT

  if (this._dialect.supports.inserts.updateOnDuplicate && options.updateOnDuplicate) {
    if (this._dialect.supports.inserts.updateOnDuplicate == " ON CONFLICT DO UPDATE SET") {
      const conflictKeys = options.upsertKeys.map((attr) => this.quoteIdentifier(attr));
      const updateKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=EXCLUDED.${this.quoteIdentifier(attr)}`);
      let whereClause = false;
      if (options.conflictWhere) {
        if (!this._dialect.supports.inserts.onConflictWhere) {
          throw new Error(`conflictWhere not supported for dialect ${this._dialect.name}`);
        }
        whereClause = this.whereQuery(options.conflictWhere, options);
      }
      onDuplicateKeyUpdate = [
        "ON CONFLICT",
        "(",
        conflictKeys.join(","),
        ")",
        whereClause,
        "DO UPDATE SET",
        updateKeys.join(",")
      ];
    } else {
      if (options.conflictWhere) {
        throw new Error(`conflictWhere not supported for dialect ${this._dialect.name}`);
      }
      const valueKeys = options.updateOnDuplicate.map((attr) => `${this.quoteIdentifier(attr)}=VALUES(${this.quoteIdentifier(attr)})`);
      onDuplicateKeyUpdate = `${this._dialect.supports.inserts.updateOnDuplicate} ${valueKeys.join(",")}`;
    }
  }
  */
  const ignoreDuplicates = options.ignoreDuplicates ? this._dialect.supports.inserts.ignoreDuplicates : "";
  const attributes = allAttributes.map((attr) => this.quoteIdentifier(attr)).join(",");
  const onConflictDoNothing = options.ignoreDuplicates ? this._dialect.supports.inserts.onConflictDoNothing : "";
  let returning = "";
  if (this._dialect.supports.returnValues && options.returning) {
    const returnValues = this.generateReturnValues(fieldMappedAttributes, options);
    returning += returnValues.returningFragment;
  }
  return Utils.joinSQLFragments([
    options.type,
    ignoreDuplicates,
    "INTO",
    this.quoteTable(tableName),
    `(${attributes})`,
    "VALUES",
    tuples.join(","),
    onDuplicateKeyUpdate,
    onConflictDoNothing,
    returning,
    ";"
  ]);
}
